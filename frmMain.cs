using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using WinDBToBackEndGenerator.Libs;

namespace WinDBToBackEndGenerator
{
    public partial class frmMain : Form
    {
        public readonly SqlObjectLibs sqlObjectLibs = new SqlObjectLibs();
        public frmMain()
        {
            InitializeComponent();
        }

        private void frmMain_Load(object sender, EventArgs e)
        {
            cboDBTemplate.DataSource= sqlObjectLibs.ConnectionStrings;
            cboDBTemplate.DisplayMember = "name";
            cboDBTemplate.ValueMember= "connectionstring";
            txtPath.Text = Application.StartupPath;
            txtNamespace.Text = "NSAutoGenerated";
            tabControl1.Visible = false;
        }

        private void cboDBTemplate_SelectedIndexChanged(object sender, EventArgs e)
        {
          var selected=  sqlObjectLibs.ConnectionStrings.Where(x => x.name == cboDBTemplate.Text).Select(x=>x.connectionstring).FirstOrDefault();
            txtConnectionString.Text = selected;
        }
        private void btnConnect_Click(object sender, EventArgs e)
        {
            if (sqlObjectLibs.IsConnected)
            {
                ResetCtrls();
                return;
            }
            if (sqlObjectLibs.GetConnected(txtConnectionString.Text)) {
                txtConnectionString.Enabled = false;
                btnConnect.Text = "Disconnected";
                tabControl1.Visible = true;
                List<SqlObjects> tables = sqlObjectLibs.GetTables();
                lstTables.Items.Clear();
                foreach (var item in tables)
                {
                    lstTables.Items.Add(item.ObjectName);
                }
            }
            else
            {
                ResetCtrls(); 
            }
        }

        private void ResetCtrls()
        {
            sqlObjectLibs.Disconnected();
            txtConnectionString.Enabled = true;
            btnConnect.Text = "Connected";
            lstTables.Items.Clear();
            tabControl1.Visible = false;
       
        }

        private void btnGenerateScripts_Click(object sender, EventArgs e)
        {
            string script = string.Empty;
            sqlObjectLibs.DeleteFolder(Path.Combine(Application.StartupPath, "Models"));
            sqlObjectLibs.DeleteFolder(Path.Combine(Application.StartupPath, "DBScript"));
            sqlObjectLibs.DeleteFolder(Path.Combine(Application.StartupPath, "DAL"));
            foreach (var item in lstTables.SelectedItems)
            {
                string classNamealtered = item.ToString().Replace("_", "");
                classNamealtered = classNamealtered.Substring(0, 1).ToUpper() + "" + classNamealtered.Substring(1, classNamealtered.Length - 1);

                if (chkClassEntities.Checked)
                {
                    script = sqlObjectLibs.CreateTableModel(item.ToString(), txtNamespace.Text.ToString(), txtClassPrefix.Text);
                    sqlObjectLibs.CreateModelFile(Path.Combine(Application.StartupPath, "Models"), classNamealtered, script);
                }

                if (chkDataAccessObjects.Checked)
                {
                    script = sqlObjectLibs.CreateTableDAL(item.ToString(), txtNamespace.Text, txtClassPrefix.Text);
                    sqlObjectLibs.CreateDALFile(Path.Combine(Application.StartupPath, "DAL"), classNamealtered, script);
                }

                if (chkSqlProcedures.Checked)
                {
                    script = sqlObjectLibs.CreateSQLCRUD(item.ToString(), Path.Combine(Application.StartupPath, "DBScript"), classNamealtered, chkSingleDBScript.Checked);
                }
            }
            MessageBox.Show("Scripts are Created successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

        }
    }
}
